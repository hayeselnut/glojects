{"version":3,"sources":["firebase/firebaseConfig.js","api/index.js","components/common/NavBar.jsx","assets/plus.svg","components/glojectPage.jsx/DifficultyLabel.jsx","components/8k.jpeg","components/ui/RandomGlojectBtn.js","components/World.js","components/WorldUtil/projectsUtil.js","components/WorldUtil/cameraAnimations.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","convertToArray","snapshot","glojects","forEach","doc","id","data","gloject","push","this","firebase","apps","length","initializeApp","firestore","getAll","a","collection","get","getAllActives","where","getById","glojectId","exists","getAllFilters","difficulty","tags","allGlojects","console","log","filter","every","t","includes","getAllTags","allTags","Set","map","flat","create","glojectData","add","delete","update","updated","users","createUser","uid","username","email","location","image","set","active_glojects","past_glojects","interests","getCurrentUserId","auth","currentUser","styled","div","RandomGlojectBtn","updateFocus","Button","onClick","index","Math","floor","random","coordinates","initOptions","enableMarkerGlow","markerRadiusScaleRange","markerType","enableMarkerToolTip","focusAnimationDuration","focusDistanceRadiusScale","cameraRotateSpeed","focusEasingFunction","enableDefocus","World","useState","setGlojects","focus","setFocus","open","setOpen","options","setOptions","initZoom","window","removeEventListener","useEffect","addEventListener","api","then","res","newGlojects","value","title","description","latitude","longitude","team","ownerId","owner","maxTeamSize","scrapeToGlojectObj","style","startModalStyle","upperText","middleText","left","middle","right","lowerText","globeTexture","texture","height","width","markers","onClickMarker","obj","m","zoomToMarker","newOptions","cameraAutoRotateSpeed","onDefocus","initialCameraDistanceRadiusScale","position","backgroundColor","display","flexDirection","color","justifyContent","pointEvents","flex","fontSize","fontWeight","alignItems","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6af95705.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n    apiKey: 'AIzaSyDnFzcl4K2gtIBIETg77m3a6N_izwZAGS4',\r\n    authDomain: 'glojects.firebaseapp.com',\r\n    projectId: 'glojects',\r\n    storageBucket: 'glojects.appspot.com',\r\n    messagingSenderId: '837750996466',\r\n    appId: '1:837750996466:web:79dc5e0db7ade834fb3f6b',\r\n    measurementId: 'G-6V45WZLM9W',\r\n  };","// Contains all communication with Firestore database\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport { firebaseConfig } from '../firebase/firebaseConfig';\r\n\r\nconst getDb = () => {\r\n  if (firebase.apps.length === 0) {\r\n    firebase.initializeApp(firebaseConfig);\r\n  }\r\n  return firebase.firestore();\r\n};\r\n\r\nconst convertToArray = (snapshot) => {\r\n  const glojects = [];\r\n  snapshot.forEach((doc) => {\r\n    const id = doc.id;\r\n    const data = doc.data();\r\n    const gloject = {id, ...data};\r\n    glojects.push(gloject);\r\n  });\r\n  return glojects;\r\n};\r\n\r\nclass API {\r\n  #db;\r\n\r\n  constructor() {\r\n    this.#db = getDb();\r\n    this.glojects = {\r\n      getAll: async () => {\r\n        const snapshot = await this.#db.collection('glojects').get();\r\n        return convertToArray(snapshot);\r\n      },\r\n      getAllActives: async () => {\r\n        const snapshot = await this.#db.collection('glojects')\r\n          .where('status', '==', 'ACTIVE')\r\n          .get();\r\n        return convertToArray(snapshot);\r\n      },\r\n      getById: async (glojectId) => {\r\n        if (!glojectId) return {};\r\n        const snapshot = await this.#db.collection('glojects').doc(glojectId).get();\r\n        if (!snapshot.exists) return {};\r\n        const id = snapshot.id;\r\n        const data = snapshot.data();\r\n        return {id, ...data};\r\n      },\r\n\r\n      getAllFilters: async ({difficulty, tags}) => {\r\n        const allGlojects = await this.glojects.getAll();\r\n\r\n        console.log(\"tags length\", tags.length)\r\n        return allGlojects\r\n          .filter((gloject) => difficulty === '' ? true : gloject.difficulty === difficulty)\r\n          .filter((gloject) => tags.length ? tags.every(t => gloject.tags.includes(t)) : true );\r\n      },\r\n      getAllTags: async () => {\r\n        const allGlojects = await this.glojects.getAll();\r\n        const allTags = [...new Set(allGlojects.map((gloject) => gloject.tags).flat())];\r\n        return allTags;\r\n      },\r\n      exists: async (glojectId) =>\r\n        (await this.glojects.getById(glojectId)).exists,\r\n      create: async (glojectData) =>\r\n        await this.#db.collection('glojects').add(glojectData),\r\n      delete: async (glojectId) =>\r\n        await this.#db.collection('glojects').doc(glojectId).delete(),\r\n      update: async (glojectId, updated) => await this.#db.collection('glojects').doc(glojectId).update(updated),\r\n    };\r\n    this.users = {\r\n      createUser: async (uid, username, email, location, image) =>\r\n        await this.#db.collection('users').doc(uid).set({\r\n          username: username,\r\n          email: email,\r\n          location: location,\r\n          active_glojects: [],\r\n          past_glojects: [],\r\n          interests: [],\r\n          image: image,\r\n        }),\r\n      getById: async (uid) => {\r\n        if (!uid) return {};\r\n        const snapshot = await this.#db.collection('users').doc(uid).get()\r\n        const id = snapshot.id;\r\n        const data = snapshot.data();\r\n        return {id, ...data};\r\n      },\r\n      getCurrentUserId: () => firebase.auth().currentUser.id,\r\n      exists: async (uid) => (await this.users.getById(uid)).exists,\r\n    };\r\n  }\r\n}\r\n\r\nexport default new API();\r\n","import React, { Component, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Avatar from '../avatar/Avatar';\r\nimport { Menu, Segment, Header, Button } from 'semantic-ui-react';\r\nimport { logout } from '../../firebase/auth';\r\nimport SignupModal from '../signupPage/SignupModal';\r\nimport LoginModal from '../signupPage/LoginModal';\r\n\r\nconst StyledNav = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  position: absolute;\r\n  margin: 10px;\r\n  margin-right: 20px;\r\n  margin-left: 20px;\r\n  width: 100%;\r\n`;\r\n\r\nconst LeftDiv = styled.div``;\r\nconst RightDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  width: 300px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst NavBar = (props) => {\r\n  const [activeItem, setActiveItem] = useState('home');\r\n  const [logggedIn, setLoggedIn] = useState(false);\r\n  const [buttons, setButtons] = useState('');\r\n  const [signupOpen, setSignupOpen] = useState(false);\r\n  const [loginOpen, setLoginOpen] = useState(false);\r\n  const [userId, setUserId] = useState(localStorage.getItem('id'));\r\n\r\n  const handleItemClick = () => {};\r\n  const handleLogout = async () => {\r\n    await logout();\r\n    setLoggedIn(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const pathname = window.location.pathname;\r\n    console.log(pathname);\r\n    console.log(logggedIn, userId);\r\n    if (logggedIn || userId !== null) {\r\n      console.log(logggedIn, userId);\r\n      setButtons(\r\n        <RightDiv>\r\n          <Avatar\r\n            userId={localStorage.getItem('id')}\r\n            style={{ margin: '10px' }}\r\n          />\r\n          <Button\r\n            name=\"sign out\"\r\n            inverted\r\n            onClick={handleLogout}\r\n            style={{ margin: '10px' }}\r\n          >\r\n            Sign Out\r\n          </Button>\r\n        </RightDiv>\r\n      );\r\n    } else {\r\n      setButtons(\r\n        <RightDiv>\r\n          <Button\r\n            name=\"sign in\"\r\n            style={{ margin: '5px' }}\r\n            inverted\r\n            onClick={() => setLoginOpen(true)}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Button\r\n            name=\"register\"\r\n            style={{ margin: '5px' }}\r\n            inverted\r\n            onClick={() => setSignupOpen(true)}\r\n          >\r\n            Register\r\n          </Button>\r\n        </RightDiv>\r\n      );\r\n    }\r\n  }, [logggedIn]);\r\n  return (\r\n    <StyledNav>\r\n      <LeftDiv>\r\n        <Header as=\"h1\" style={{ color: 'white' }}>\r\n          Gl<span>&#x1f30e;</span>jects\r\n        </Header>\r\n      </LeftDiv>\r\n      <RightDiv>\r\n        {buttons}\r\n\r\n        <SignupModal\r\n          signupOpen={signupOpen}\r\n          setSignupOpen={setSignupOpen}\r\n          logggedIn={logggedIn}\r\n          setLoggedIn={setLoggedIn}\r\n        ></SignupModal>\r\n        <LoginModal\r\n          loginOpen={loginOpen}\r\n          setLoginOpen={setLoginOpen}\r\n          logggedIn={logggedIn}\r\n          setLoggedIn={setLoggedIn}\r\n        ></LoginModal>\r\n      </RightDiv>\r\n    </StyledNav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","export default __webpack_public_path__ + \"static/media/plus.3b1907cc.svg\";","import React from 'react';\r\n\r\nimport { Label } from 'semantic-ui-react';\r\n\r\nconst DifficultyLabel = (props) => {\r\n  const { difficulty } = props;\r\n\r\n  const color = difficulty === 'EASY' ? 'green'\r\n    : difficulty === 'MEDIUM' ? 'yellow' : 'red';\r\n\r\n  return (\r\n    <Label\r\n      color={color}\r\n    >\r\n      {difficulty}\r\n    </Label>\r\n  );\r\n};\r\n\r\nexport default DifficultyLabel;\r\n","export default __webpack_public_path__ + \"static/media/8k.c6149084.jpeg\";","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nconst RandomGlojectBtn = ({glojects, updateFocus}) => {\r\n    const randomGlojectCoordinates = () => {\r\n        const index = Math.floor(Math.random() * glojects.length);\r\n\r\n        const coordinates = [glojects[index].coordinates[0], glojects[index].coordinates[1]];\r\n        updateFocus(coordinates);\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            onClick={randomGlojectCoordinates}\r\n        >\r\n            Explore!    \r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default RandomGlojectBtn;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactGlobe from 'react-globe';\r\nimport texture from './8k.jpeg';\r\n\r\nimport api from '../api';\r\n\r\n// import ToggleExperienceBtn from './ui/toggleExperienceBtn';\r\nimport { zoomToMarker } from './WorldUtil/cameraAnimations';\r\nimport { scrapeToGlojectObj } from './WorldUtil/projectsUtil';\r\nimport RandomGlojectBtn from './ui/RandomGlojectBtn';\r\n\r\n// const sampleData = [...Array(25).keys()].map(() => ({\r\n//     projectName: \"Project Name\",\r\n//     difficulty: [\"Easy\", \"Medium\", \"Hard\"][Math.round(Math.random() * 2)],\r\n//     coordinates: [(Math.random() - 0.5) * 180, (Math.random() - 0.5) * 360],\r\n//     value: 25,\r\n// }));\r\n\r\n// sampleData.forEach((marker, index) => {\r\n//     marker['id'] = index.toString();\r\n//     if (marker.difficulty === \"Easy\") {\r\n//         marker['color'] = 'green';\r\n//     } else if (marker.difficulty === \"Medium\") {\r\n//         marker['color'] = 'blue';\r\n//     } else if (marker.difficulty === \"Hard\") {\r\n//         marker['color'] = 'red';\r\n//     }\r\n// })\r\n\r\n// console.log(sampleData);\r\n\r\nconst initOptions = {\r\n    enableMarkerGlow: true,\r\n    // markerGlowCoefficient: 1,\r\n    // markerGlowPower: 1,\r\n    // markerGlowRadiusScale: 0.8,\r\n    markerRadiusScaleRange: [0.005, 0.02],\r\n    markerType: 'dot',\r\n    enableMarkerToolTip: true,\r\n    // markerEnterAnimationDuration: 3000,\r\n    // markerEnterEasingFunction: ['Bounce', 'InOut'],\r\n    // markerExitEasingFunction: ['Cubic', 'Out'],\r\n    // markerTooltipRenderer: marker => \r\n    //     `${marker.city} (Sales: ${marker.value}.0M)`,\r\n    // markerRadiusScaleRange: [0.01, 0.05],\r\n\r\n    // cameraAutoRotateSpeed: 0.5,\r\n\r\n    focusAnimationDuration: 2000,\r\n    focusDistanceRadiusScale: 1.5,\r\n    cameraRotateSpeed: 0.5,\r\n    focusEasingFunction: ['Linear', 'None'],\r\n    enableDefocus: true,\r\n}\r\n\r\nconst World = () => {\r\n    const [glojects, setGlojects] = useState([]);\r\n    const [focus, setFocus] = useState(null);\r\n    const [open, setOpen] = useState(true);\r\n    const [options, setOptions] = useState(initOptions);\r\n\r\n    const initZoom = () => {\r\n        // const newOptions = {...options};\r\n        // newOptions.cameraAutoRotateSpeed = 0.1;\r\n        window.removeEventListener('keydown', initZoom, true);\r\n        window.removeEventListener('click', initZoom, true);\r\n        setFocus([-33, 151]);\r\n        setOpen(false);\r\n        // setOptions(newOptions);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', initZoom, true);\r\n        window.addEventListener('click', initZoom, true);\r\n\r\n        api.glojects.getAllActives().then((res) => {\r\n            const newGlojects = [];\r\n            res.forEach((value, index) => {\r\n                newGlojects.push(scrapeToGlojectObj(value));\r\n\r\n            })\r\n\r\n            console.log(\"New glojects are \", newGlojects);\r\n            setGlojects(newGlojects);\r\n        })\r\n    }, []);\r\n\r\n    const onClick = (obj) => {\r\n        zoomToMarker(setFocus, obj);\r\n        const newOptions = {...options};\r\n        newOptions.cameraAutoRotateSpeed = 0;\r\n        setOptions(newOptions);\r\n    };\r\n\r\n    const onDefocus = () => {\r\n        const newOptions = {...options};\r\n        newOptions.cameraAutoRotateSpeed = 0.1;\r\n        setOptions(newOptions);\r\n    }\r\n\r\n\r\n    const updateGlojects = (newGlojects) => {\r\n        setGlojects(newGlojects);\r\n    }\r\n\r\n    const updateFocus = (coordinates) => {\r\n        setFocus(coordinates);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {console.log(\"In world\")}\r\n            { open ? <div style={startModalStyle}>\r\n                <div style={upperText}/>\r\n                <div style={middleText}>\r\n                    <div style={left}>\r\n                        G L\r\n                    </div>\r\n                    <div style={middle}/>\r\n                    <div style={right}>\r\n                        J E C T S\r\n                    </div>\r\n                </div>\r\n                <div style={lowerText}>\r\n                    Press any key to continue\r\n                </div>\r\n            </div> : null}\r\n            <RandomGlojectBtn glojects={glojects} updateFocus={updateFocus}/>\r\n            {/* <ToggleExperienceBtn updateGlojects={updateGlojects}/> */}\r\n            <ReactGlobe \r\n                globeTexture={texture}\r\n                focus={focus}\r\n                height=\"100vh\"\r\n                width=\"100wh\"\r\n                markers={glojects}\r\n                options={options}\r\n                onClickMarker={onClick}\r\n                onDefocus={onDefocus}\r\n                initialCameraDistanceRadiusScale={25}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default World;\r\n\r\nconst startModalStyle = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"fixed\",\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    // border: \"10px solid blue\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    color: \"white\",\r\n    justifyContent: \"center\",\r\n\r\n    pointEvents: \"none\"\r\n}\r\n\r\nconst upperText = {\r\n    flex: 4,\r\n    // border: \"5px solid red\",\r\n    // backgroundColor: \"red\",\r\n    // fontSize: \"50px\"\r\n}\r\n\r\nconst middleText = {\r\n    flex: 3,\r\n    // backgroundColor: \"green\"\r\n    // border: \"5px solid green\",\r\n    fontSize: \"8vw\",\r\n    fontWeight: \"bold\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // letterSpacing: \"1vw\",\r\n    // marginLeft: \"20vw\",\r\n    // paddingLeft: \"18%\"\r\n}\r\n\r\nconst left = {\r\n    flex: 4,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    // border: \"2px solid purple\",\r\n    alignItems: \"flex-end\",\r\n    justifyContent: \"flex-end\",\r\n}\r\nconst middle = {\r\n    flex: 1,\r\n    // border: \"2px solid white\",\r\n}\r\n\r\nconst right = {\r\n    flex: 4,\r\n    // border: \"2px solid orange\",\r\n    alignItems: \"flex-start\"\r\n}\r\n\r\nconst lowerText = {\r\n    flex: 4,\r\n    // border: \"5px solid yellow\",\r\n    textAlign: \"center\"\r\n    // backgroundColor: \"yellow\"\r\n}\r\n\r\n","/* Helper functions to filter and return new list of markers based on \r\ncertain criteria as well as functions to add or delete projects, etc*/\r\n\r\n// Given an array of objects, a text field and a value, returns a filtered\r\n// array containing only objects matching the criteria\r\nexport const filterByExactField = (projects, field, value) => {\r\n    console.log(\"Filtering projects\", projects);\r\n    const newProjects = projects.filter(obj => obj[field] === value);\r\n    return newProjects;\r\n}\r\n\r\n// Given a project and the list of projects, adds it to the list of existing projects\r\nexport const addProject = (projects, p) => {\r\n    const newProjects = [...projects];\r\n    newProjects.push(p);\r\n    return newProjects;\r\n}\r\n\r\n// Given a project id and the list of projects, removes it from the list and returns\r\nexport const removeProject = (projects, pId) => {\r\n    const newProjects = projects.filter(obj => obj.id !== pId)\r\n    return newProjects;\r\n}\r\n\r\n// Given a scraped gloject, converts it into a gloject object\r\nexport const scrapeToGlojectObj = (value) => {\r\n    const gloject = {\r\n        id: value.id,\r\n        title: value.title,\r\n        description: value.description,\r\n        difficulty: value.difficulty,\r\n        coordinates: [value.location.latitude, value.location.longitude],\r\n        team: value.team,\r\n        tags: value.tags,\r\n        ownerId: value.owner,\r\n        maxTeamSize: value.maxTeamSize,\r\n        value: 25\r\n    }\r\n\r\n    if (gloject.difficulty === 'EASY') {\r\n        gloject['color'] = 'green';\r\n    } else if (gloject.difficulty === 'MEDIUM') {\r\n        gloject['color'] = 'blue';\r\n    } else if (gloject.difficulty === 'HARD') {\r\n        gloject['color'] = 'red';\r\n    }\r\n\r\n    return gloject;\r\n}","/* Animation helpers, including zooming around the globe to your points*/\r\n\r\n// Given a marker, sets the focus to that marker, updating the state\r\nexport const zoomToMarker = (setFocus, m) => {\r\n    console.log(\"Setting focus to marker\", m);\r\n    setFocus([m.coordinates[0], m.coordinates[1]]);\r\n}","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { StoreProvider } from './utils/store';\r\n\r\nimport PrivateRoute from './PrivateRoute';\r\nimport LandingPage from './components/landingPage/LandingPage';\r\nimport SignupPage from './components/signupPage/SignupPage';\r\nimport GlojectPage from './components/glojectPage.jsx/GlojectPage';\r\nimport UserProfilePage from './components/userProfilePage/UserProfilePage';\r\nimport NavBar from './components/common/NavBar';\r\nimport NewGlojectPage from './components/newGlojectPage/NewGlojectPage';\r\nimport World from './components/World';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport ApiPage from './components/apiPage/ApiPage';\r\nimport EditGlojectPage from './components/editGlojectPage/EditGlojectPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <World></World>\r\n    // <StoreProvider>\r\n    //   <NavBar />\r\n    //   <Router>\r\n    //     <Switch>\r\n    //       {console.log(\"In router\")}\r\n    //       <Route exact path=\"/\" component={World} />\r\n    //       <PrivateRoute path=\"/signup\" component={SignupPage} />\r\n    //       <Route exact path=\"/api\" component={ApiPage} />\r\n    //       <Route exact path=\"/g/new\" component={NewGlojectPage} />\r\n    //       <Route exact path=\"/g/:glojectId\" component={GlojectPage} />\r\n    //       <Route exact path=\"/g/:glojectId/edit\" component={EditGlojectPage} />\r\n    //       <Route exact path=\"/u/:uid\" component={UserProfilePage} />\r\n    //     </Switch>\r\n    //   </Router>\r\n    // </StoreProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}